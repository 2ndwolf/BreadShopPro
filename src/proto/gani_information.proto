//=================================
// include guard
#ifndef _ganiInformation_h_
#define _ganiInformation_h_

#include <vector>
#include <string>

#include "enums.h"

using namespace std;

message GaniInformation {

  message SpriteDef {
      enum DefaultImageType {
        NOTDEFAULT = 0;
        SPRITES = 1;
        SHIELD = 2;
        HEAD = 3;
        BODY = 4;
        SWORD = 5;
        HORSE = 6;
        PARAM1 = 7;
        ATTR1 = 8;
        PARAM2 = 9;
        ATTR2 = 10;
        PARAM3 = 11;
        ATTR3 = 12;
        }

      uint32 index = 1;
      string image = 2;
      int32 offX = 3;
      int32 offY = 4;
      int32 width = 5;
      int32 height = 6;
      string name = 7;
      DefaultImageType defaultImage = 8;

      }
}

  class Sound {
    public:
      string fileName;
      int32 x, y;

      Sound() = default;

      Sound(string &pFileName, double pX, double pY) : fileName(pFileName), x(static_cast<int32>(pX * 16)), y(static_cast<int32>(pY * 16)) ;
  };

  class AniSprite {
    public:
      int32 spriteIndex, x, y, layer;

      AniSprite() = default;

      AniSprite(int32 pSpriteIndex, int32 pX, int32 pY, int32 pLayer) : spriteIndex(pSpriteIndex), x(pX), y(pY), layer(pLayer) ;
  };

  class AniDir {
    public:
      Directions direction;
      vector<AniSprite> aniSprites;

      AniDir() = default;

      explicit AniDir(Directions pDirection) : direction(pDirection) ;
  };

  class AniFrame {
    public:
      vector<AniDir> aniDirs;
      int32 wait;
      vector<Sound> sounds;

      AniFrame() = default;
  };

  class AttachedSprite {
    public:
      int32 spriteA, spriteB, relX, relY;

      AttachedSprite() = default;

      AttachedSprite(int32 pSpriteA, int32 pSpriteB, int32 pRelX, int32 pRelY) : spriteA(pSpriteA), spriteB(pSpriteB), relX(pRelX), relY(pRelY) ;
  };

  class GaniInformation {
    public:
      vector<SpriteDef> spriteDefs;
      vector<AniFrame> aniFrames;
      vector<Property> properties;
      vector<AttachedSprite> attachedSprites;
      vector<string> defaultAttributes;
      vector<string> defaultParameters;
      string defaultHead;
      string defaultBody;
      string nextGani = "none";

      GaniInformation() = default;
  };
}
#endif
