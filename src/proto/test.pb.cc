// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class GaniInformation_SpriteDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GaniInformation_SpriteDef>
      _instance;
} _GaniInformation_SpriteDef_default_instance_;
class GaniInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GaniInformation>
      _instance;
} _GaniInformation_default_instance_;
namespace protobuf_test_2eproto {
void InitDefaultsGaniInformation_SpriteDefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_GaniInformation_SpriteDef_default_instance_;
    new (ptr) ::GaniInformation_SpriteDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GaniInformation_SpriteDef::InitAsDefaultInstance();
}

void InitDefaultsGaniInformation_SpriteDef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGaniInformation_SpriteDefImpl);
}

void InitDefaultsGaniInformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_GaniInformation_default_instance_;
    new (ptr) ::GaniInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GaniInformation::InitAsDefaultInstance();
}

void InitDefaultsGaniInformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGaniInformationImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, offx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, offy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation_SpriteDef, defaultimage_),
  2,
  0,
  3,
  4,
  5,
  6,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GaniInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::GaniInformation_SpriteDef)},
  { 21, 26, sizeof(::GaniInformation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GaniInformation_SpriteDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GaniInformation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\"\366\002\n\017GaniInformation\032\342\002\n\tSpr"
      "iteDef\022\r\n\005index\030\001 \001(\r\022\r\n\005image\030\002 \001(\t\022\014\n\004"
      "offX\030\003 \001(\005\022\014\n\004offY\030\004 \001(\005\022\r\n\005width\030\005 \001(\005\022"
      "\016\n\006height\030\006 \001(\005\022\014\n\004name\030\007 \001(\t\022A\n\014default"
      "Image\030\010 \001(\0162+.GaniInformation.SpriteDef."
      "DefaultImageType\"\252\001\n\020DefaultImageType\022\016\n"
      "\nNOTDEFAULT\020\000\022\013\n\007SPRITES\020\001\022\n\n\006SHIELD\020\002\022\010"
      "\n\004HEAD\020\003\022\010\n\004BODY\020\004\022\t\n\005SWORD\020\005\022\t\n\005HORSE\020\006"
      "\022\n\n\006PARAM1\020\007\022\t\n\005ATTR1\020\010\022\n\n\006PARAM2\020\t\022\t\n\005A"
      "TTR2\020\n\022\n\n\006PARAM3\020\013\022\t\n\005ATTR3\020\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_test_2eproto
const ::google::protobuf::EnumDescriptor* GaniInformation_SpriteDef_DefaultImageType_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[0];
}
bool GaniInformation_SpriteDef_DefaultImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::NOTDEFAULT;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::SPRITES;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::SHIELD;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::HEAD;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::BODY;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::SWORD;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::HORSE;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::PARAM1;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::ATTR1;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::PARAM2;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::ATTR2;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::PARAM3;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::ATTR3;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::DefaultImageType_MIN;
const GaniInformation_SpriteDef_DefaultImageType GaniInformation_SpriteDef::DefaultImageType_MAX;
const int GaniInformation_SpriteDef::DefaultImageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GaniInformation_SpriteDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GaniInformation_SpriteDef::kIndexFieldNumber;
const int GaniInformation_SpriteDef::kImageFieldNumber;
const int GaniInformation_SpriteDef::kOffXFieldNumber;
const int GaniInformation_SpriteDef::kOffYFieldNumber;
const int GaniInformation_SpriteDef::kWidthFieldNumber;
const int GaniInformation_SpriteDef::kHeightFieldNumber;
const int GaniInformation_SpriteDef::kNameFieldNumber;
const int GaniInformation_SpriteDef::kDefaultImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaniInformation_SpriteDef::GaniInformation_SpriteDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_test_2eproto::InitDefaultsGaniInformation_SpriteDef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GaniInformation.SpriteDef)
}
GaniInformation_SpriteDef::GaniInformation_SpriteDef(const GaniInformation_SpriteDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&defaultimage_) -
    reinterpret_cast<char*>(&index_)) + sizeof(defaultimage_));
  // @@protoc_insertion_point(copy_constructor:GaniInformation.SpriteDef)
}

void GaniInformation_SpriteDef::SharedCtor() {
  _cached_size_ = 0;
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defaultimage_) -
      reinterpret_cast<char*>(&index_)) + sizeof(defaultimage_));
}

GaniInformation_SpriteDef::~GaniInformation_SpriteDef() {
  // @@protoc_insertion_point(destructor:GaniInformation.SpriteDef)
  SharedDtor();
}

void GaniInformation_SpriteDef::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GaniInformation_SpriteDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaniInformation_SpriteDef::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GaniInformation_SpriteDef& GaniInformation_SpriteDef::default_instance() {
  ::protobuf_test_2eproto::InitDefaultsGaniInformation_SpriteDef();
  return *internal_default_instance();
}

GaniInformation_SpriteDef* GaniInformation_SpriteDef::New(::google::protobuf::Arena* arena) const {
  GaniInformation_SpriteDef* n = new GaniInformation_SpriteDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaniInformation_SpriteDef::Clear() {
// @@protoc_insertion_point(message_clear_start:GaniInformation.SpriteDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defaultimage_) -
        reinterpret_cast<char*>(&index_)) + sizeof(defaultimage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GaniInformation_SpriteDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GaniInformation.SpriteDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GaniInformation.SpriteDef.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_offy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GaniInformation.SpriteDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GaniInformation.SpriteDef.DefaultImageType defaultImage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GaniInformation_SpriteDef_DefaultImageType_IsValid(value)) {
            set_defaultimage(static_cast< ::GaniInformation_SpriteDef_DefaultImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GaniInformation.SpriteDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GaniInformation.SpriteDef)
  return false;
#undef DO_
}

void GaniInformation_SpriteDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GaniInformation.SpriteDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string image = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GaniInformation.SpriteDef.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // optional int32 offX = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offx(), output);
  }

  // optional int32 offY = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offy(), output);
  }

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GaniInformation.SpriteDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional .GaniInformation.SpriteDef.DefaultImageType defaultImage = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->defaultimage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GaniInformation.SpriteDef)
}

::google::protobuf::uint8* GaniInformation_SpriteDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GaniInformation.SpriteDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string image = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GaniInformation.SpriteDef.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // optional int32 offX = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offx(), target);
  }

  // optional int32 offY = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offy(), target);
  }

  // optional int32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GaniInformation.SpriteDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional .GaniInformation.SpriteDef.DefaultImageType defaultImage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->defaultimage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GaniInformation.SpriteDef)
  return target;
}

size_t GaniInformation_SpriteDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GaniInformation.SpriteDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional int32 offX = 3;
    if (has_offx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offx());
    }

    // optional int32 offY = 4;
    if (has_offy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offy());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .GaniInformation.SpriteDef.DefaultImageType defaultImage = 8;
    if (has_defaultimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->defaultimage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaniInformation_SpriteDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GaniInformation.SpriteDef)
  GOOGLE_DCHECK_NE(&from, this);
  const GaniInformation_SpriteDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaniInformation_SpriteDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GaniInformation.SpriteDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GaniInformation.SpriteDef)
    MergeFrom(*source);
  }
}

void GaniInformation_SpriteDef::MergeFrom(const GaniInformation_SpriteDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GaniInformation.SpriteDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      offx_ = from.offx_;
    }
    if (cached_has_bits & 0x00000010u) {
      offy_ = from.offy_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      defaultimage_ = from.defaultimage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaniInformation_SpriteDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GaniInformation.SpriteDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaniInformation_SpriteDef::CopyFrom(const GaniInformation_SpriteDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GaniInformation.SpriteDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaniInformation_SpriteDef::IsInitialized() const {
  return true;
}

void GaniInformation_SpriteDef::Swap(GaniInformation_SpriteDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaniInformation_SpriteDef::InternalSwap(GaniInformation_SpriteDef* other) {
  using std::swap;
  image_.Swap(&other->image_);
  name_.Swap(&other->name_);
  swap(index_, other->index_);
  swap(offx_, other->offx_);
  swap(offy_, other->offy_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(defaultimage_, other->defaultimage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaniInformation_SpriteDef::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GaniInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaniInformation::GaniInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_test_2eproto::InitDefaultsGaniInformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GaniInformation)
}
GaniInformation::GaniInformation(const GaniInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GaniInformation)
}

void GaniInformation::SharedCtor() {
  _cached_size_ = 0;
}

GaniInformation::~GaniInformation() {
  // @@protoc_insertion_point(destructor:GaniInformation)
  SharedDtor();
}

void GaniInformation::SharedDtor() {
}

void GaniInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaniInformation::descriptor() {
  ::protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GaniInformation& GaniInformation::default_instance() {
  ::protobuf_test_2eproto::InitDefaultsGaniInformation();
  return *internal_default_instance();
}

GaniInformation* GaniInformation::New(::google::protobuf::Arena* arena) const {
  GaniInformation* n = new GaniInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaniInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:GaniInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GaniInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GaniInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GaniInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GaniInformation)
  return false;
#undef DO_
}

void GaniInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GaniInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GaniInformation)
}

::google::protobuf::uint8* GaniInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GaniInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GaniInformation)
  return target;
}

size_t GaniInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GaniInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaniInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GaniInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const GaniInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaniInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GaniInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GaniInformation)
    MergeFrom(*source);
  }
}

void GaniInformation::MergeFrom(const GaniInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GaniInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GaniInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GaniInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaniInformation::CopyFrom(const GaniInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GaniInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaniInformation::IsInitialized() const {
  return true;
}

void GaniInformation::Swap(GaniInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaniInformation::InternalSwap(GaniInformation* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaniInformation::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
